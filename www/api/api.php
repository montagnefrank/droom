<?php

/*
 *          ***********************************************************
 *          *******************||  DROOM SOFTWARE   ||*****************
 *          ***********************************************************
 * 
 *          @date               2019-03-22
 *          @author             Bayman Burton <bayman@burtonservers.com>
 *          @copyright          2015-2019 Burton Tech
 *          @license            https://www.gnu.org/licenses/gpl-3.0.en.html GNU General Public License (GPL v3)
 *          International Registered Trademark & Property of Burton Technology  https://burtonservers.com
 * 
 *          This source file is subject to the GNU General Public License (GPL v3)
 *          that is bundled with this package in the file LICENSE.txt.
 *          It is also available through the world-wide-web at this URL:
 *          https://www.gnu.org/licenses/gpl-3.0.en.html
 *          If you did not receive a copy of the license and are unable to
 *          obtain it through the world-wide-web, please send an email
 *          to dev@burtonservers.com so we can send you a copy immediately.
 *          This software is built and distributed by Burton Technology https://burtonservers.com
 *          By using this software you are Aware it is strictly prohibited its comercial distribution or 
 *          modification of any aspect of the aplication
 *
 *          Desc:
 *          Integrated Restaurant Management Software.
 *          Focused on handling the full operation of the restaurant, including support for multi
 *          restaurants, kitchen control, teller management and Waiter module for wireless order submitting
 *          also comes with an Admin Dashboard and custom reports.
 * 
 *          WARNING
 *          Please do not edit this file or the aplication could stop working as intended, also
 *          any modifications will be overwritten by newer versions in the future
 *          
 */


//  DEBUG EN PANTALLA   //
error_reporting(E_ALL);
ini_set('display_errors', 1);

//  HABILITAMOS EL ACCESO PUBLICO PARA REALIZAR LLAMADAS AJAX DESDE DOMINIOS PUBLICOS   //
header('Access-Control-Allow-Origin: *');
header('Access-Control-Allow-Credentials: true');
header('Access-Control-Allow-Headers: Origin, Content-Type, Authorization, X-Auth-Token');
header('Access-Control-Allow-Methods: GET, POST, PUT, PATCH, DELETE, HEAD, OPTIONS');

header('Content-type: application/javascript; charset=utf-8');

//   ES IMPORTANTE RESCATAR TODO EL OUTPUT  //
/*
 * LUEGO PODEMOS PROMPTEARLO EN PANTALLA CON
 * $output = ob_get_contents(); ob_end_clean();
 */
ob_start();

//   INCLUDES   //
use PHPMailer\PHPMailer\PHPMailer;
use PHPMailer\PHPMailer\Exception;

require 'assets/plugins/PHPMailer/src/Exception.php';
require 'assets/plugins/PHPMailer/src/PHPMailer.php';
require 'assets/plugins/PHPMailer/src/SMTP.php';
require_once 'assets/scripts/funcs.php';

//   Creamos el enlace con la DB    //
require("../assets/scripts/database.php");

// INICIAMOS //
date_default_timezone_set('America/Guayaquil');
$json = array();
if ($_POST) {
    $method = broom('reg', $_POST['meth']);

    //          USUARIO INICIA SESION           //
    if ($method == 'login') {


        $username = broom('reg', $_POST["username"]);
        $password = $_POST["password"];

//        $username = filter_var($_POST['username'], FILTER_VALIDATE_EMAIL);
//        $password = hash('sha512', $_POST['password']);
//        
        ////            CONSULTAMOS EL USUARIO EN LA BASE DE DATOS A VER SI EXISTE              ////
        $query = " SELECT * FROM usuario us "
                . " INNER JOIN perfil p ON (us.idPerfil = p.idPerfil ) "
                . " INNER JOIN establecimiento e ON (us.idEstablecimiento = e.idEstablecimiento ) "
                . " WHERE nombreUsuario like '$username' ";
        $result = $conn->query($query);
        if (!$result) {
            $json['scriptResp'] = "userqueryFail";
            $json['q'] = $query;
            $output = ob_get_contents();
            ob_end_clean();
            $json['output'] = $output;
            echo json_encode($json);
            return;
        }
        $rows = $result->num_rows;
        $row = $result->fetch_array(MYSQLI_ASSOC);

        ////          RETORNAMOS UN JSON AL AJAX PARA ALIMENTAR EL JAVASCRIPT          ////
        $json['userIntel'] = $row;

        if (($rows != 0) && (strcmp($row["nombreUsuario"], $username) == 0) && ($row['passwordUsuario'] === $password)) {

            //   VERIFICAMOS SI TIENE IMAGEN CARGADA || CARGAMOS IMAGEN PREDETERMINADA        //
            $isavatar = "assets/img/users/" . $row["idUsuario"] . ".jpg";
            if (file_exists($isavatar)) {
                $json['userIntel']['userImg'] = "api/" . $isavatar;
            } else {
                $isavatar2 = "assets/img/users/" . $row["idUsuario"] . ".png";
                if (file_exists($isavatar2)) {
                    $json['userIntel']['userImg'] = "api/" . $isavatar2;
                } else {
                    $json['userIntel']['userImg'] = "api/assets/img/users/default.jpg";
                }
            }

            ////             ENVIAMOS DATOS POR $_SESSION;          /////
            session_start();
            $_SESSION["usuario"] = $json['userIntel'];

            //              DATOS PARA CONSTRUIR LOS MODULOS            //
            $_SESSION["usuario"]["nombreEstablecimiento"] = $json['userIntel']["nombreEstablecimiento"];
            $_SESSION["usuario"]["ciudadEstablecimiento"] = $json['userIntel']["ciudadEstablecimiento"];
            $_SESSION["usuario"]["telefonoEstablecimiento"] = $json['userIntel']["telefonoEstablecimiento"];
            $_SESSION["usuario"]["sectorEstablecimiento"] = $json['userIntel']["sectorEstablecimiento"];

            $val_update = "UPDATE usuario SET lastLogin = '" . date('Y-m-d H:i:s') . "' WHERE idUsuario = '" . $row["idUsuario"] . "';";
            $val_result = $conn->query($val_update) or die("{'scriptResp' : 'queryFailedd', 'query' : '" . $val_update . "'}");

            $json['userIntel'] = $_SESSION["usuario"];
            $json['scriptResp'] = "match";
            $output = ob_get_contents();
            ob_end_clean();
            $json['output'] = $output;
            echo json_encode($json);
            return;
        } else {
            $json['scriptResp'] = "noMatch";
            $json['passw'] = $_POST['password'];
            $json['passwo'] = $password;
            $json['password'] = $row['passUsuario'];
            $json['q'] = $query;
            $output = ob_get_contents();
            ob_end_clean();
            $json['output'] = $output;
            echo json_encode($json);
            return;
        }
    }

    //          ASIGNAMOS LAS MESAS AL NUEVO EPDIDO             //
    if ($method == 'asignaMesa') {

        $idMesa = $_POST["idmesa"];
        $numeroMesa = $_POST["numeromesa"];
        $idPedido;

        if (isset($_POST["idpedido"])) {
            $idPedido = $_POST["idpedido"];
        }
        session_start();
        $_SESSION["idmesa"] = $idMesa;
        $_SESSION["numeromesa"] = $numeroMesa;
        if (isset($idPedido)) {
            $_SESSION["idpedido"] = $idPedido;

            $json['scriptResp'] = "done";
            $output = ob_get_contents();
            ob_end_clean();
            $json['output'] = $output;
            echo json_encode($json);
            return;
        } else {
            $json['scriptResp'] = "unDone";
            $output = ob_get_contents();
            ob_end_clean();
            $json['output'] = $output;
            echo json_encode($json);
            return;
        }
    }

    //          CONSULTAMOS LOS PEDIDOS EXISTENTES            //
    if ($method == 'consultaPedidos') {

        session_start();
        $idEstablecimiento = $_SESSION['usuario']['idEstablecimiento'];

        $query = "SELECT * FROM pedido pe "
                . "INNER JOIN mesa m on(m.idMesa=pe.idMesa) "
                . "INNER JOIN pedidoproducto pp ON(pe.idPedido = pp.idPedido) "
                . "INNER JOIN producto p on(p.idProducto = pp.idProducto) "
                . "INNER JOIN submenu sm on(p.idSubMenu = sm.idSubMenu) "
                . "INNER JOIN menu me on (sm.idMenu = me.idMenu) "
                . "GROUP BY(pe.idPedido) "
                . "HAVING m.estadoMesa = 'OCUPADA' AND pe.estadopagoPedido != 'PAGADO' AND m.idEstablecimiento = '$idEstablecimiento' "
                . "ORDER BY pe.idPedido ASC";

        $result = $conn->query($query);
        if (!$result)
            die($conn->error);

        $rows = $result->num_rows;
        $pedidos = array();

        for ($i = 0; $i < $rows; $i++) {
            $result->data_seek($i);
            $pedidos[] = $result->fetch_array(MYSQLI_ASSOC);
        }

        $json['pedidos'] = $pedidos;
        $output = ob_get_contents();
        ob_end_clean();
        $json['output'] = $output;
        echo json_encode($json);
        return;
    }

    //          VERIFICAMOS LAS MESAS DISPONIBLES           //
    if ($method == 'mesas') {

        session_start();
        $idEstablecimiento = $_SESSION['usuario']['idEstablecimiento'];

        //          LLAMAMOS TODAS LAS MESAS DISPONIBLES PARA ESE ESTABLECIMIENTO           //
        $query = "SELECT * FROM mesa WHERE idEstablecimiento = '$idEstablecimiento' AND estadoMesa = 'HABILITADA' ORDER BY CAST(numeroMesa as SIGNED INTEGER) ASC";
        $result = $conn->query($query);
        if (!$result)
            die($conn->error);
        $rows = $result->num_rows;
        $row = array();
        for ($i = 0; $i < $rows; $i++) {
            $result->data_seek($i);
            $row['database'][] = $result->fetch_array(MYSQLI_ASSOC);
            $temp = end($row['database']);
            $row['keys'][] = $temp['nivelMesa'];
        }
        $json['mesas'] = $row['database'];
        $json['niveles'] = array_unique($row['keys']);
        
        $output = ob_get_contents();
        ob_end_clean();
        $json['output'] = $output;
        echo json_encode($json);
        return;
        return;
    }
}

if ($_GET) {
    $method = broom('reg', $_GET['meth']);
}

//   Si no se llamó ningún método de la API     //
var_dump($_POST);
var_dump($_GET);
var_dump($_FILES);
$output = ob_get_contents();
$json['msg'] = "Silent script";
$json['output'] = $output;
ob_end_clean();
echo json_encode($json);
return;
?>